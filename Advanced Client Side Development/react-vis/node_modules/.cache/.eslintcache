[{"/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/index.js":"1","/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/App.js":"2","/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/reportWebVitals.js":"3","/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/components/PieVis.js":"4","/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/components/BarVis.js":"5","/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/components/LineVis.js":"6"},{"size":500,"mtime":1646255476468,"results":"7","hashOfConfig":"8"},{"size":306,"mtime":1646263086831,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1646255476469,"results":"10","hashOfConfig":"8"},{"size":2006,"mtime":1646263715256,"results":"11","hashOfConfig":"8"},{"size":2426,"mtime":1646263610106,"results":"12","hashOfConfig":"8"},{"size":2620,"mtime":1646263422553,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2vxnzz",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"21"},"/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/index.js",[],[],"/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/App.js",["36"],[],"import logo from './logo.svg';\nimport './App.css';\nimport PieVis from './components/PieVis';\nimport BarVis from './components/BarVis';\nimport LineVis from './components/LineVis';\n\nfunction App() {\n  return (\n    <div>\n      <PieVis/>\n      <BarVis/>\n      <LineVis/>\n    </div>\n  );\n}\n\nexport default App;\n",["37","38"],"/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/reportWebVitals.js",[],[],"/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/components/PieVis.js",["39"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Highcharts from 'highcharts/highcharts'\nimport PieChart from \"highcharts-react-official\"\n\nfunction PieVis() {\n    const [earnings, setEarnings] = useState({});\n\n    const config = {\n        credits: {\n            enabled: false\n        },\n        chart: {\n            plotBackgroundColor: null,\n            plotBorderWidth: null,\n            plotShadow: false,\n            type: 'pie'\n        },\n        title: {\n            text: 'Earnings by City'\n        },\n        tooltip: {\n            pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n        },\n        accessibility: {\n            point: {\n                valueSuffix: '%'\n            }\n        },\n        plotOptions: {\n            pie: {\n                allowPointSelect: true,\n                cursor: 'pointer',\n                dataLabels: {\n                    enabled: true,\n                    format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n                }\n            }\n        },\n        series: [{\n            name: 'Earnings',\n            colorByPoint: true,\n            data: earnings\n        }]\n    }\n\n\n    useEffect(async function () {\n        var data = await axios.get(\"http://localhost:8080/earnings\")\n        var formattedData = data.data.map(function(earnings) {\n            return {\n                name: earnings.country,\n                y: earnings.earnings\n                }\n            }\n        )\n        console.log(formattedData)\n        \n        // Timeout available to test the Loading If/Else statement at lines 62-73\n        // setTimeout(() => { \n            setEarnings(formattedData)\n            // ; }, 500)\n    }, [])\n\n    if (earnings.length) {\n        return (\n            <div>\n                <PieChart highcharts={Highcharts} options={config}/>\n            </div>\n        )\n    } else {\n        return (\n            <div>\n                Loading. . .\n            </div>\n        )}\n}\n\nexport default PieVis;","/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/components/BarVis.js",["40","41","42"],[],"/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/components/LineVis.js",["43","44","45"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Highcharts from 'highcharts/highcharts';\nimport LineChart from 'highcharts-react-official';\n\nfunction LineVis() {\n    const [sales,setSales] = useState([]);\n    const [salesYear,setSalesYear] = useState([]);\n    const config = {\n        credits: {\n            enabled: false\n        },\n\n        title: {\n            text: 'Earnings by year, per City'\n        },\n    \n        yAxis: {\n            title: {\n                text: 'â‚¬'\n            }\n        },\n    \n        xAxis: {\n            accessibility: {\n                rangeDescription: 'Range: 2010 to current'\n            }\n        },\n    \n        legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle'\n        },\n    \n        plotOptions: {\n            series: {\n                label: {\n                    connectorAllowed: false\n                },\n                pointStart: 2010\n            }\n        },\n    \n        series: sales,\n    \n        responsive: {\n            rules: [{\n                condition: {\n                    maxWidth: 500\n                },\n                chartOptions: {\n                    legend: {\n                        layout: 'horizontal',\n                        align: 'center',\n                        verticalAlign: 'bottom'\n                    }\n                }\n            }]\n        }\n    \n    }\n\n    useEffect(async function() {\n        var dateSet = false\n        var data = await axios.get(\"http://localhost:8080/sales\")\n        var formattedSales = data.data.map(function(earnings) {\n            return {\n                name: earnings.country,\n                data: earnings.data\n            }\n        })\n        var formattedSalesYear = data.data.map(function(earnings) {\n            return earnings.years\n        }, [])\n        console.log(formattedSalesYear)\n        setSales(formattedSales)\n        for (let i=1; i<formattedSalesYear.length; i++) {\n            if (formattedSalesYear[i] = formattedSalesYear[i-1]) {\n                dateSet = true\n            } else {\n                dateSet = false\n                formattedSalesYear = [\"error\", \"error\", \"error\", \"error\", \"error\", \"error\"]\n                break\n            }\n            console.log(\"dateSet: \"+dateSet)\n        }\n        if (dateSet) {\n            console.log(\"hello\")\n            setSalesYear(formattedSalesYear)\n        }\n        console.log(salesYear)\n    }, [])\n\n    return (\n        <div>\n            <LineChart highcharts={Highcharts} options={config}/>\n        </div>\n    )\n}\n\nexport default LineVis;",{"ruleId":"46","severity":1,"message":"47","line":1,"column":8,"nodeType":"48","messageId":"49","endLine":1,"endColumn":12},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":48,"column":15,"nodeType":"56","endLine":63,"endColumn":6},{"ruleId":"54","severity":1,"message":"55","line":46,"column":15,"nodeType":"56","endLine":75,"endColumn":6},{"ruleId":"57","severity":1,"message":"58","line":61,"column":17,"nodeType":"59","messageId":"60","endLine":61,"endColumn":64},{"ruleId":"54","severity":1,"message":"61","line":75,"column":8,"nodeType":"62","endLine":75,"endColumn":10,"suggestions":"63"},{"ruleId":"54","severity":1,"message":"55","line":64,"column":15,"nodeType":"56","endLine":93,"endColumn":6},{"ruleId":"57","severity":1,"message":"58","line":79,"column":17,"nodeType":"59","messageId":"60","endLine":79,"endColumn":64},{"ruleId":"54","severity":1,"message":"61","line":93,"column":8,"nodeType":"62","endLine":93,"endColumn":10,"suggestions":"64"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["65"],"no-negated-in-lhs",["66"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","FunctionExpression","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","React Hook useEffect has a missing dependency: 'salesYear'. Either include it or remove the dependency array.","ArrayExpression",["67"],["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},{"desc":"69","fix":"71"},"Update the dependencies array to be: [salesYear]",{"range":"72","text":"73"},{"range":"74","text":"73"},[2279,2281],"[salesYear]",[2473,2475]]