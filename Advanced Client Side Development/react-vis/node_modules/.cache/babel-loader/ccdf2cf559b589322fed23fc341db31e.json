{"ast":null,"code":"var _jsxFileName = \"/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/components/BarVis.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Highcharts from 'highcharts/highcharts';\nimport BarChart from 'highcharts-react-official';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BarVis() {\n  _s();\n\n  const [sales, setSales] = useState([]);\n  const [salesYear, setSalesYear] = useState([]);\n  const config = {\n    credits: {\n      enabled: false\n    },\n    chart: {\n      type: 'column'\n    },\n    title: {\n      text: 'Earnings by year, per City'\n    },\n    xAxis: {\n      categories: salesYear[0],\n      crosshair: true\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: '€'\n      }\n    },\n    tooltip: {\n      headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n      pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' + '<td style=\"padding:0\">€<b>{point.y:.1f}</b></td></tr>',\n      footerFormat: '</table>',\n      shared: true,\n      useHTML: true\n    },\n    plotOptions: {\n      column: {\n        pointPadding: 0.2,\n        borderWidth: 0\n      }\n    },\n    series: sales\n  };\n  useEffect(async function () {\n    var dateSet = false;\n    var data = await axios.get(\"http://localhost:8080/sales\");\n    var formattedSales = data.data.map(function (earnings) {\n      return {\n        name: earnings.country,\n        data: earnings.data\n      };\n    });\n    var formattedSalesYear = data.data.map(function (earnings) {\n      return earnings.years;\n    }, []);\n    console.log(formattedSalesYear);\n    setSales(formattedSales);\n\n    for (let i = 1; i < formattedSalesYear.length; i++) {\n      if (formattedSalesYear[i] = formattedSalesYear[i - 1]) {\n        dateSet = true;\n      } else {\n        dateSet = false;\n        formattedSalesYear = [\"error\", \"error\", \"error\", \"error\", \"error\", \"error\"];\n        break;\n      }\n\n      console.log(\"dateSet: \" + dateSet);\n    }\n\n    if (dateSet) {\n      console.log(\"hello\");\n      setSalesYear(formattedSalesYear);\n    }\n\n    console.log(salesYear);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      highcharts: Highcharts,\n      options: config\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BarVis, \"+Vz6rFjtMbIOlYo2DPcoDznAu8M=\");\n\n_c = BarVis;\nexport default BarVis;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarVis\");","map":{"version":3,"sources":["/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/components/BarVis.js"],"names":["useState","useEffect","axios","Highcharts","BarChart","BarVis","sales","setSales","salesYear","setSalesYear","config","credits","enabled","chart","type","title","text","xAxis","categories","crosshair","yAxis","min","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","plotOptions","column","pointPadding","borderWidth","series","dateSet","data","get","formattedSales","map","earnings","name","country","formattedSalesYear","years","console","log","i","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Highcharts from 'highcharts/highcharts';\nimport BarChart from 'highcharts-react-official';\n\nfunction BarVis() {\n    const [sales,setSales] = useState([]);\n    const [salesYear,setSalesYear] = useState([]);\n    const config = {\n        credits: {\n            enabled: false\n        },\n        chart: {\n            type: 'column'\n        },\n        title: {\n            text: 'Earnings by year, per City'\n        },\n        xAxis: {\n            categories: salesYear[0],\n            crosshair: true\n        },\n        yAxis: {\n            min: 0,\n            title: {\n                text: '€'\n            }\n        },\n        tooltip: {\n            headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n            pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n                '<td style=\"padding:0\">€<b>{point.y:.1f}</b></td></tr>',\n            footerFormat: '</table>',\n            shared: true,\n            useHTML: true\n        },\n        plotOptions: {\n            column: {\n                pointPadding: 0.2,\n                borderWidth: 0\n            }\n        },\n        series: sales\n    }\n\n    useEffect(async function() {\n        var dateSet = false\n        var data = await axios.get(\"http://localhost:8080/sales\")\n        var formattedSales = data.data.map(function(earnings) {\n            return {\n                name: earnings.country,\n                data: earnings.data\n            }\n        })\n        var formattedSalesYear = data.data.map(function(earnings) {\n            return earnings.years\n        }, [])\n        console.log(formattedSalesYear)\n        setSales(formattedSales)\n        for (let i=1; i<formattedSalesYear.length; i++) {\n            if (formattedSalesYear[i] = formattedSalesYear[i-1]) {\n                dateSet = true\n            } else {\n                dateSet = false\n                formattedSalesYear = [\"error\", \"error\", \"error\", \"error\", \"error\", \"error\"]\n                break\n            }\n            console.log(\"dateSet: \"+dateSet)\n        }\n        if (dateSet) {\n            console.log(\"hello\")\n            setSalesYear(formattedSalesYear)\n        }\n        console.log(salesYear)\n    }, [])\n\n    return (\n        <div>\n            <BarChart highcharts={Highcharts} options={config}/>\n        </div>\n    )\n}\n\nexport default BarVis;"]},"metadata":{},"sourceType":"module"}