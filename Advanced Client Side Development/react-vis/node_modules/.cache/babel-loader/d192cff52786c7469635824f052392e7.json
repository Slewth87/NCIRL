{"ast":null,"code":"var _jsxFileName = \"/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/components/LineVis.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Highcharts from 'highcharts/highcharts';\nimport LineChart from 'highcharts-react-official';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LineVis() {\n  _s();\n\n  const [sales, setSales] = useState([]);\n  const [salesYear, setSalesYear] = useState([]);\n  const config = {\n    title: {\n      text: 'Solar Employment Growth by Sector, 2010-2016'\n    },\n    subtitle: {\n      text: 'Source: thesolarfoundation.com'\n    },\n    yAxis: {\n      title: {\n        text: 'Number of Employees'\n      }\n    },\n    xAxis: {\n      accessibility: {\n        rangeDescription: 'Range: 2010 to 2017'\n      }\n    },\n    legend: {\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'middle'\n    },\n    plotOptions: {\n      series: {\n        label: {\n          connectorAllowed: false\n        },\n        pointStart: 2010\n      }\n    },\n    series: sales,\n    responsive: {\n      rules: [{\n        condition: {\n          maxWidth: 500\n        },\n        chartOptions: {\n          legend: {\n            layout: 'horizontal',\n            align: 'center',\n            verticalAlign: 'bottom'\n          }\n        }\n      }]\n    }\n  };\n  useEffect(async function () {\n    var dateSet = false;\n    var data = await axios.get(\"http://localhost:8080/sales\");\n    var formattedSales = data.data.map(function (earnings) {\n      return {\n        name: earnings.country,\n        data: earnings.data\n      };\n    });\n    var formattedSalesYear = data.data.map(function (earnings) {\n      return earnings.years;\n    }, []);\n    console.log(formattedSalesYear);\n    setSales(formattedSales);\n\n    for (let i = 1; i < formattedSalesYear.length; i++) {\n      if (formattedSalesYear[i] = formattedSalesYear[i - 1]) {\n        dateSet = true;\n      } else {\n        dateSet = false;\n        formattedSalesYear = [\"error\", \"error\", \"error\", \"error\", \"error\", \"error\"];\n        break;\n      }\n\n      console.log(\"dateSet: \" + dateSet);\n    }\n\n    if (dateSet) {\n      console.log(\"hello\");\n      setSalesYear(formattedSalesYear);\n    }\n\n    console.log(salesYear);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      highcharts: Highcharts,\n      options: config\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LineVis, \"+Vz6rFjtMbIOlYo2DPcoDznAu8M=\");\n\n_c = LineVis;\nexport default LineVis;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineVis\");","map":{"version":3,"sources":["/Users/rduffy/Code/NCIRL/Advanced Client Side Development/react-vis/src/components/LineVis.js"],"names":["useState","useEffect","axios","Highcharts","LineChart","LineVis","sales","setSales","salesYear","setSalesYear","config","title","text","subtitle","yAxis","xAxis","accessibility","rangeDescription","legend","layout","align","verticalAlign","plotOptions","series","label","connectorAllowed","pointStart","responsive","rules","condition","maxWidth","chartOptions","dateSet","data","get","formattedSales","map","earnings","name","country","formattedSalesYear","years","console","log","i","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Highcharts from 'highcharts/highcharts';\nimport LineChart from 'highcharts-react-official';\n\nfunction LineVis() {\n    const [sales,setSales] = useState([]);\n    const [salesYear,setSalesYear] = useState([]);\n    const config = {\n\n        title: {\n            text: 'Solar Employment Growth by Sector, 2010-2016'\n        },\n    \n        subtitle: {\n            text: 'Source: thesolarfoundation.com'\n        },\n    \n        yAxis: {\n            title: {\n                text: 'Number of Employees'\n            }\n        },\n    \n        xAxis: {\n            accessibility: {\n                rangeDescription: 'Range: 2010 to 2017'\n            }\n        },\n    \n        legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle'\n        },\n    \n        plotOptions: {\n            series: {\n                label: {\n                    connectorAllowed: false\n                },\n                pointStart: 2010\n            }\n        },\n    \n        series: sales,\n    \n        responsive: {\n            rules: [{\n                condition: {\n                    maxWidth: 500\n                },\n                chartOptions: {\n                    legend: {\n                        layout: 'horizontal',\n                        align: 'center',\n                        verticalAlign: 'bottom'\n                    }\n                }\n            }]\n        }\n    \n    }\n\n    useEffect(async function() {\n        var dateSet = false\n        var data = await axios.get(\"http://localhost:8080/sales\")\n        var formattedSales = data.data.map(function(earnings) {\n            return {\n                name: earnings.country,\n                data: earnings.data\n            }\n        })\n        var formattedSalesYear = data.data.map(function(earnings) {\n            return earnings.years\n        }, [])\n        console.log(formattedSalesYear)\n        setSales(formattedSales)\n        for (let i=1; i<formattedSalesYear.length; i++) {\n            if (formattedSalesYear[i] = formattedSalesYear[i-1]) {\n                dateSet = true\n            } else {\n                dateSet = false\n                formattedSalesYear = [\"error\", \"error\", \"error\", \"error\", \"error\", \"error\"]\n                break\n            }\n            console.log(\"dateSet: \"+dateSet)\n        }\n        if (dateSet) {\n            console.log(\"hello\")\n            setSalesYear(formattedSalesYear)\n        }\n        console.log(salesYear)\n    }, [])\n\n    return (\n        <div>\n            <LineChart highcharts={Highcharts} options={config}/>\n        </div>\n    )\n}\n\nexport default LineVis;"]},"metadata":{},"sourceType":"module"}